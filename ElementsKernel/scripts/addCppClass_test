#!/bin/sh

# Call common script
. createCommonStructure_test

class_name="ClassTest"
elt_dep_name="Alexandria"
external_dep_name="Boost"

# Create a unique directory
tmploc=${TEMPORARY_LOCATION}

cd ${tmploc}
cd ${MODULE_NAME_PATH}

# Create a class
AddCppClass $class_name -ed $elt_dep_name -extd $external_dep_name

# if error stop and clean up
if [ $? -ne 0 ]; then
   echo "Error: <AddCppClass $class_name -ed $elt_dep_name -extd $external_dep_name> command failed!" 1>&2
   clean_and_exit 1
fi

# Make sure the class files are created
if [ ! -e "${MODULE_NAME}/${class_name}.h" ]; then
   echo "Error: <${MODULE_NAME}/${class_name}.h> file not found!" 1>&2
   clean_and_exit 1
fi
if [ ! -e "src/lib/${class_name}.cpp" ]; then
   echo "Error: <src/lib/${class_name}.cpp> file not found!" 1>&2
   clean_and_exit 1
fi
if [ ! -e "tests/src/${class_name}_test.cpp" ]; then
   echo "Error: <tests/src/${class_name}_test.cpp> file not found!" 1>&2
   clean_and_exit 1
fi

# test if the include statement contains a double slash
result=$(grep -e "^\s*#\s*include\s*\(<[^>/]*/\{2,\}.*>\|\"[^\"/]*/\{2,\}.*\"\)\s*" tests/src/${class_name}_test.cpp)
if [ $? -eq 0 ]  ;then
  echo "The tests/src/${class_name}_test.cpp contains an include statement with double //" 1>&2
  clean_and_exit 1
fi


# Make sure the elements_depends_on_subdirs macro is there and ElementsKernel
result=$( grep "elements_depends_on_subdirs" ${MODULE_NAME_PATH}/CMakeLists.txt |
          grep -v "#" | grep "ElementsKernel" )
if [ $? -ne 0 ]  ;then
   echo "Error: <elements_depends_on_subdirs> macro with <ElementsKernel> module not found!" 1>&2
   clean_and_exit 1
fi

# Make sure the elements_depends_on_subdirs macro is there and dependency
result=$( grep "elements_depends_on_subdirs" ${MODULE_NAME_PATH}/CMakeLists.txt |
          grep -v "#" | grep $elt_dep_name )
if [ $? -ne 0 ]  ;then
   echo "Error: <elements_depends_on_subdirs> macro with <$elt_dep_name> dependency not found!" 1>&2
   clean_and_exit 1
fi

# Make sure the find_package macro is there
result=$( grep "find_package" ${MODULE_NAME_PATH}/CMakeLists.txt |
          grep -v "#" | grep $external_dep_name )
if [ $? -ne 0 ]  ;then
   echo "Error: find_package macro not found!" 1>&2
   clean_and_exit 1
fi

# Make sure the elements_add_library macro is there
result=$( grep "elements_add_library" ${MODULE_NAME_PATH}/CMakeLists.txt |  grep -v "#" |
          grep $module_name )
if [ $? -ne 0 ]  ;then
   echo "Error: <elements_add_library> macro with <$module_name> module not found!" 1>&2
   clean_and_exit 1
fi

# Make sure the LINK_LIBRARIES is there and Elements dependency
result=$( grep "LINK_LIBRARIES" ${MODULE_NAME_PATH}/CMakeLists.txt |  grep -v "#" |
          grep $elt_dep_name)
if [ $? -ne 0 ]  ;then
   echo "Error: LINK_LIBRARIES macro with <$elt_dep_name> Elements dependency not found!" 1>&2
   clean_and_exit 1
fi

# Make sure the LINK_LIBRARIES is there and external dependency
result=$( grep "LINK_LIBRARIES" ${MODULE_NAME_PATH}/CMakeLists.txt |  grep -v "#" |
          grep $external_dep_name)
if [ $? -ne 0 ]  ;then
   echo "Error: LINK_LIBRARIES macro with <$external_dep_name> external dependency not found!" 1>&2
   clean_and_exit 1
fi

# Make sure the INCLUDE_DIRS is there and Elements dependency
result=$( grep "INCLUDE_DIRS" ${MODULE_NAME_PATH}/CMakeLists.txt |  grep -v "#" |
          grep $elt_dep_name)
if [ $? -ne 0 ]  ;then
   echo "Error: INCLUDE_DIRS macro with <$elt_dep_name> Elements dependency not found!" 1>&2
   clean_and_exit 1
fi

# Make sure the INCLUDE_DIRS is there and external dependency
result=$( grep "INCLUDE_DIRS" ${MODULE_NAME_PATH}/CMakeLists.txt |  grep -v "#" |
          grep $external_dep_name)
if [ $? -ne 0 ]  ;then
   echo "Error: INCLUDE_DIRS macro with <$external_dep_name> external dependency not found!" 1>&2
   clean_and_exit 1
fi


# Create a class into a subdir and make sure the elements_add_unit_test macro
# is correct and files are at the right place
# Create a class with subdir

subdir="subdir"
AddCppClass $subdir/$class_name

result=$( grep "elements_add_unit_test" ${MODULE_NAME_PATH}/CMakeLists.txt |  grep -v "#" |
          grep $class_name | grep $subdir)
if [ $? -ne 0 ]  ;then
   echo "Error: in elements_add_unit_test macro, no <$subdir> not found!" 1>&2
   clean_and_exit 1
fi

# Make sure the class files are created
if [ ! -e "${MODULE_NAME}/${subdir}/${class_name}.h" ]; then
   echo "Error: <${MODULE_NAME}/${class_name}.h> file not found!" 1>&2
   clean_and_exit 1
fi
if [ ! -e "src/lib/${subdir}/${class_name}.cpp" ]; then
   echo "Error: <src/lib/${subdir}/${class_name}.cpp> file not found!" 1>&2
   clean_and_exit 1
fi

if [ ! -e "tests/src/${subdir}/${class_name}_test.cpp" ]; then
   echo "Error: <tests/src/${subdir}/${class_name}_test.cpp> file not found!" 1>&2
   clean_and_exit 1
fi

# test if the include statement contains a double slash
result=$(grep -e "^\s*#\s*include\s*\(<[^>/]*/\{2,\}.*>\|\"[^\"/]*/\{2,\}.*\"\)\s*" tests/src/${subdir}/${class_name}_test.cpp)
if [ $? -eq 0 ]  ;then
   echo "The tests/src/${subdir}/${class_name}_test.cpp contains an include statement with double //" 1>&2
   clean_and_exit 1
fi

# Test if the include in class.cpp is correct
result=$( grep "#include"| grep "${MODULE_NAME}/${subdir}/${class_name}.h" src/lib/${subdir}/${class_name}.cpp )
if [ $? -ne 0 ]  ;then
   echo "The ${MODULE_NAME}/${subdir}/${class_name}.h contains an wrong include statement" 1>&2
   clean_and_exit 1
fi

# Test if the include is correct in the class_name_test.cpp
result=$( grep "#include"| grep -v boost| grep "${MODULE_NAME}/${subdir}/${class_name}.h"  tests/src/${subdir}/${class_name}_test.cpp)
if [ $? -ne 0 ]  ;then
   echo "The tests/src/${subdir}/${class_name}_test.cpp contains a wrong include statement" 1>&2
   clean_and_exit 1
fi

# Test the visibility option : simple

#######################################zzzzz to be finished here....

class_name_vis="ClassVisibilityTest"

AddCppClass $class_name_vis -V simple

if [ $? -ne 0 ]  ;then
   echo "The tests/src/${subdir}/${class_name}_test.cpp contains a wrong include statement" 1>&2
   clean_and_exit 1
fi


clean_and_exit 0
